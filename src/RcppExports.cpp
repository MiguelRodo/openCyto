// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getTautStringApprox
Rcpp::List getTautStringApprox(std::vector<double> dataVec);
RcppExport SEXP _openCytoFork_getTautStringApprox(SEXP dataVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type dataVec(dataVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getTautStringApprox(dataVec));
    return rcpp_result_gen;
END_RCPP
}
// collapseData
NumericMatrix collapseData(List mat_list, StringVector colnames);
RcppExport SEXP _openCytoFork_collapseData(SEXP mat_listSEXP, SEXP colnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< StringVector >::type colnames(colnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseData(mat_list, colnames));
    return rcpp_result_gen;
END_RCPP
}
// singleDip
double singleDip(const std::vector<double>& x);
RcppExport SEXP _openCytoFork_singleDip(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(singleDip(x));
    return rcpp_result_gen;
END_RCPP
}
// tsGates
std::vector<double> tsGates(const std::vector<double>& xVec, int modePrior);
RcppExport SEXP _openCytoFork_tsGates(SEXP xVecSEXP, SEXP modePriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type xVec(xVecSEXP);
    Rcpp::traits::input_parameter< int >::type modePrior(modePriorSEXP);
    rcpp_result_gen = Rcpp::wrap(tsGates(xVec, modePrior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_openCytoFork_getTautStringApprox", (DL_FUNC) &_openCytoFork_getTautStringApprox, 1},
    {"_openCytoFork_collapseData", (DL_FUNC) &_openCytoFork_collapseData, 2},
    {"_openCytoFork_singleDip", (DL_FUNC) &_openCytoFork_singleDip, 1},
    {"_openCytoFork_tsGates", (DL_FUNC) &_openCytoFork_tsGates, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_openCytoFork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
